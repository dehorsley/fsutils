#!/usr/bin/env python2
'''
Find the next IVS scheduled VLBI observation containing at least one of the given stations.
'''

from __future__ import print_function
from datetime import datetime, timedelta
import sys
import os
import argparse


#CONFIG
DEFAULT_STNS = ['hb', 'ke', 'yg', 'ho']
MASTER_PATH = '/vlbobs/ivs/master%d.txt' # %d is replaced with the two digit year.
MASTER_URL = 'ftp://cddis.gsfc.nasa.gov/pub/vlbi/ivscontrol/master%d.txt'

MASTER_COLUMNS = ["name",
                  "code",
                  "date",
                  "doy",
                  "time",
                  "dur",
                  "stations",
                  "sked",
                  "corr",
                  "status",
                  "pf",
                  "dbcCode",
                  "subm",
                  "del",
                  "mk4Num",
                 ]

def parse_session(line, year=None):
    """
    Convert row of master schedule into dictionary
    """
    values = line.lower().strip(' \n|').split('|')
    values = [value.strip() for value in values]
    session = dict(zip(MASTER_COLUMNS, values))
    if not year:
        year = datetime.utcnow().year
    session["year"] = year

    #Add start datetime object
    startstr = "{year} {date} {time}".format(**session)
    session["start"] = datetime.strptime(startstr, "%Y %b%d %H:%M")
    session["dur"] = timedelta(0, int(session["dur"])*60*60, 0)
    session["end"] = session["start"] + session["dur"]

    #Turn stations into a set for comparisons
    stations = set()
    stations_removed = set()
    stations_str = session["stations"].split('-')

    if len(stations_str) > 1:
        stations_removed_str = stations_str[1].strip()
        for i in range(len(stations_removed_str)/2):
            stations_removed.add(stations_removed_str[2*i:2*i+2])

    stations_str = stations_str[0].strip()
    for i in range(len(stations_str)/2):
        stations.add(stations_str[2*i:2*i+2])

    session['stations'] = stations
    session['stationsRemoved'] = stations_removed

    return session


def main():
    '''
    Do the work
    '''
    parser = argparse.ArgumentParser(description=__doc__)

    parser.add_argument('stns',
                        nargs='*',
                        default=DEFAULT_STNS,
                        help='stations to consider (default "hb ke yg ho")')

    parser.add_argument('-l',
                        '--last',
                        action='store_true',
                        help='find the last observation to finish')

    parser.add_argument('-c',
                        '--current',
                        action='store_true',
                        help='find the current observation')

    parser.add_argument('-a',
                        '--all',
                        action='store_true',
                        help='find the observation with all stns in it')

    parser.add_argument('-p',
                        '--print-stations',
                        action='store_true',
                        help='print which stns are invloved in observation')

    parser.add_argument('-u',
                        '--update',
                        action='store_true',
                        help='force an update of the master schedule file')

    args = parser.parse_args()

    if args.last and args.current:
        print('Conclicting arguments', file=sys.stderr)
        sys.exit(1)

    stns = set(args.stns)

    now = datetime.utcnow()
    year = now.year - 2000

    mstr = MASTER_PATH%year
    mstrurl = MASTER_URL%year
    #Check for new master file if we haven't done so in a day
    if (not os.path.isfile(mstr)
            or now > datetime.utcfromtimestamp(os.path.getmtime(mstr)) + timedelta(1)
            or args.update):
        os.system('wget -q %s -O %s' % (mstrurl, mstr))
        os.utime(mstr, None)

    masterfile = open(mstr, 'r')

    ses = None # The matching session
    for line in masterfile.readlines():
        if not line.startswith('|'):
            continue

        newses = parse_session(line)
        our_stns_in_exp = stns.intersection(newses["stations"])

        if (our_stns_in_exp == set()
                or args.all and our_stns_in_exp != stns):
            continue

        if args.last:
            if newses["end"] > now:
                break
            else:
                ses = newses
        elif args.current:
            if newses['start'] < now < newses['end']:
                ses = newses
            if newses['start'] > now:
                break
        else: #Next observation (default)
            if newses['start'] > now:
                ses = newses
                break

    if ses:
        if args.print_stations:
            print(ses['code'], " ".join(sorted(list(our_stns_in_exp))))
        else:
            print(ses['code'])

if __name__ == "__main__":
    main()

